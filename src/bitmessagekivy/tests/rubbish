my address test

from .telenium_process import TeleniumTestProcess
from .common import ordered


data = [
    'BM-2cWmjntZ47WKEUtocrdvs19y5CivpKoi1h',
    'BM-2cVpswZo8rWLXDVtZEUNcDQvnvHJ6TLRYr'
]

class MyAddressScreen(TeleniumTestProcess):
    """MyAddress Screen Functionality Testing"""

    @ordered
    def test_select_myaddress_list(self):
        """Select Address From List of Address"""
        # This is for checking Current screen
        self.assert_wait_no_except('//ScreenManager[@current]', timeout=15, value='inbox')
        # This is for checking the Side nav Bar is closed
        self.assertExists('//MDNavigationDrawer[@status~=\"closed\"]', timeout=5)
        # This is for checking the menu button is appeared
        self.assertExists('//MDActionTopAppBarButton[@icon~=\"menu\"]', timeout=5)
        # this is for opening Nav drawer
        self.cli.wait_click('//MDActionTopAppBarButton[@icon=\"menu\"]', timeout=5)
        # checking state of Nav drawer
        self.assertExists("//MDNavigationDrawer[@state~=\"open\"]", timeout=5)
        # this is for scrolling Nav drawer
        self.drag("//NavigationItem[@text=\"Sent\"]", "//NavigationItem[@text=\"Inbox\"]")
        # assert for checking scroll function
        self.assertCheckScrollDown('//ContentNavigationDrawer//ScrollView[0]', timeout=3)
        # this is for opening My Address screen
        self.cli.wait_click('//NavigationItem[@text=\"My addresses\"]', timeout=2)
        # Checking current screen
        self.assertExists("//ScreenManager[@current=\"myaddress\"]", timeout=3)


    @ordered
    def test_show_Qrcode(self):
        """Show the Qr code of selected address"""
        # Checking current screen
        self.assertExists("//ScreenManager[@current=\"myaddress\"]", timeout=3)
        # Click on Address to open popup
        self.cli.wait_click('//MDList[0]/CustomTwoLineAvatarIconListItem[0]', timeout=2)
        # Check the Popup is opened
        self.assertExists('//MyaddDetailPopup//MDLabel[@text=\"Show QR code\"]', timeout=2)
        # Cick on 'Show QR code' button to view QR Code
        self.cli.wait_click('//MyaddDetailPopup//MDLabel[@text=\"Show QR code\"]')
        # Check Current screen is QR Code screen
        self.assertExists("//ScreenManager[@current=\"showqrcode\"]", timeout=2)
        # Click on BACK button
        self.cli.wait_click('//MDToolbar//MDActionTopAppBarButton[@icon=\"arrow-left\"]', timeout=2)
        # Checking current screen(My Address) after BACK press
        self.assertExists("//ScreenManager[@current=\"myaddress\"]", timeout=3)
        

    @ordered
    def test_send_message_from(self):
        """Send Message From send Button"""
        # This is for checking Current screen
        self.assert_wait_no_except('//ScreenManager[@current]', timeout=5, value='myaddress')
        # Click on Address to open popup
        self.cli.wait_click('//MDList[0]/CustomTwoLineAvatarIconListItem[0]', timeout=2)
        # Checking Popup Opened
        self.assertExists('//MyaddDetailPopup//MDLabel[@text=\"Send message from\"]', timeout=2)
        # Click on Send Message Button to redirect Create Screen
        self.cli.wait_click('//MyaddDetailPopup//MDRaisedButton[0]/MDLabel[0]', timeout=2)
        # Checking Current screen(Create)
        self.assertExists("//ScreenManager[@current=\"create\"]", timeout=2)
         # Entering Receiver Address
        self.cli.setattr(
            '//DropDownWidget/ScrollView[0]//MyTextInput[0]', "text", data[1])
        # Checking Receiver Address filled or not
        self.assertNotEqual('//DropDownWidget//MyTextInput[0]', '')
         # ADD SUBJECT
        self.cli.setattr('//DropDownWidget/ScrollView[0]//MyMDTextField[0]', 'text', 'Hey this is Demo Subject')
        # Checking Subject Field is Entered
        self.assertNotEqual('//DropDownWidget/ScrollView[0]//MyMDTextField[0]', '')
         # ADD MESSAGE BODY
        self.cli.setattr('//DropDownWidget/ScrollView[0]//ScrollView[0]/MDTextField[0]',
                             'text', 'Hey,i am sending message directly from MyAddress book')
        # Checking Message body is Entered
        self.assertNotEqual('//DropDownWidget/ScrollView[0]//ScrollView[0]/MDTextField[@text]', '')
        # Click on Send Icon
        self.cli.wait_click('//MDActionTopAppBarButton[@icon=\"send\"]', timeout=3)
        self.cli.sleep(2) # Send Messages takes 2 seconds to send message so need to user sleep
        # Checking Current screen after Send a message
        self.assert_wait_no_except('//ScreenManager[@current]', timeout=5, value='inbox')

    @ordered
    def test_disable_address(self):
        """Disable Addresses"""
        # this is for checking current screen
        self.assert_wait_no_except('//ScreenManager[@current]', timeout=5, value='inbox')
        # this is for opening Nav drawer
        self.cli.wait_click('//MDActionTopAppBarButton[@icon=\"menu\"]', timeout=4)
        # checking state of Nav drawer
        self.assertExists("//MDNavigationDrawer[@state~=\"open\"]", timeout=4)
        # this is for scrolling Nav drawer
        self.drag("//NavigationItem[@text=\"Sent\"]", "//NavigationItem[@text=\"Inbox\"]")
        # assert for checking scroll function
        self.assertCheckScrollDown('//ContentNavigationDrawer//ScrollView[0]', timeout=4)
        # this is for opening setting screen
        self.cli.wait_click('//NavigationItem[@text=\"My addresses\"]', timeout=4)
        # Checking current screen
        self.assertExists("//ScreenManager[@current=\"myaddress\"]", timeout=3)
        # ADDRESS DISABLED
        # self.cli.sleep(1)
        self.cli.wait_click('//Thumb', timeout=2)
        # CLICKING ON DISABLE ACCOUNT TO OPEN POPUP
        self.click_on('//MyAddress//MDList[0]/CustomTwoLineAvatarIconListItem[0]', seconds=2)
        # Checking the pop is Opened
        self.assertExists('//MDDialog[@text=\"Address is not currently active. Please click on Toggle button to active it.\"]', timeout=2)
        # Clicking on 'Ok' Button To Dismiss the pop
        self.click_on('//MDFlatButton[@text=\"Ok\"]', seconds=2)
        self.assertNotExists('//MDDialog[@text=\"Address is not currently active. Please click on Toggle button to active it.\"]', timeout=2)
        # ADDRESS ENABLED
        self.click_on('//Thumb', seconds=2)
        # self.assertExists('//Thumb[@active=\"False\"]', timeout=2)
        self.assertExists("//ScreenManager[@current=\"myaddress\"]", timeout=3)



(Pdb) dir(self.custom_sheet)
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__events__', '__format__', '__ge__', '__getattribute__', 
'__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__metaclass__', '__module__', '__ne__', '__new__', 
'__proxy_getter', '__proxy_setter', '__pyx_vtable__', '__reduce__', '__reduce_ex__', '__repr__', '__self__', '__setattr__',
 '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '_align_center', '_anim_alpha', '_anim_duration', '_apply_transform',
  '_context', '_disabled_count', '_disabled_value', '_gl_content', '_handle_keyboard', '_kwargs_applied_init', '_parent', '_position_content',
  '_proxy_ref', '_real_remove_widget', '_search_window', '_touch_started_inside', '_trigger_layout', '_upper_padding', '_walk',
   '_walk_reverse', '_window', 'add_widget', 'anchor_x', 'anchor_y', 'animation', 'apply_class_lang_rules', 'apply_property', 
   'attach_to', 'auto_dismiss', 'background', 'background_color', 'bg_color', 'bind', 'border', 'canvas', 'center', 'center_x',
    'center_y', 'children', 'clear_widgets', 'cls', 'collide_point', 'collide_widget', 'create_property', 'dec_disabled', 
    'device_ios', 'disabled', 'dismiss', 'dispatch', 'dispatch_children', 'dispatch_generic', 'do_layout', 'duration_closing',
    z 'duration_opening', 'events', 'export_as_image', 'export_to_png', 'fbind', 'funbind', 'get_center_x', 'get_center_y',
 'get_disabled', 'get_parent_window', 'get_property_observers', 'get_right', 'get_root_window', 'get_top', 
 'get_window_matrix', 'getter', 'height', 'ids', 'inc_disabled', 'is_event_type', 'layout_hint_with_bounds',
  'md_bg_color', 'on__anim_alpha', 'on_dismiss', 'on_kv_post', 'on_opacity', 'on_open', 'on_pre_dismiss',
   'on_pre_open', 'on_touch_down', 'on_touch_move', 'on_touch_up', 'opacity', 'open', 'opposite_colors', 
   'overlay_color', 'padding', 'parent', 'pos', 'pos_hint', 'properties', 'property', 'proxy_ref', 'radius',
    'radius_from', 'register_event_type', 'remove_widget', 'resize_content_layout', 'right', 'screen', 'set_center_x', 
    'set_center_y', 'set_disabled', 'set_right', 'set_top', 'setter', 'size', 'size_hint', 'size_hint_max', 'size_hint_max_x', 
    'size_hint_max_y', 'size_hint_min', 'size_hint_min_x', 'size_hint_min_y', 'size_hint_x', 'size_hint_y', 'theme_cls',
     'to_local', 'to_parent', 'to_widget', 'to_window', 'top', 'uid', 'unbind', 'unbind_uid', 'unregister_event_types',
      'value_transparent', 'walk', 'walk_reverse', 'widget_style', 'width', 'x', 'y']



dict__', '__dir__', '__doc__', '__draw_shadow__', '__eq__', '__events__', '__format__', '__ge__', '__getattribute__', 
'__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__metaclass__', '__module__', '__ne__', 
'__new__', '__proxy_getter', '__proxy_setter', '__pyx_vtable__', '__reduce__', '__reduce_ex__', '__repr__', '__self__',
 '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_apply_transform',
  '_background_origin', '_background_x', '_background_y', '_capitalizing', '_clear_groups', '_clear_shadow_groups', 
  '_context', '_create_label', '_disabled_count', '_disabled_value', '_do_press', '_do_release', '_do_update_theme_color', 
  '_doing_ripple', '_elevation', '_fading_out', '_fake_elevation', '_finishing_ripple', '_font_properties', '_get_center',
   '_get_hard_shadow_a', '_get_soft_shadow_a', '_get_text', '_hard_shadow_a', '_kwargs_applied_init', '_label', '_no_ripple_effect', 
   '_previous_group', '_proxy_ref', '_release_group', '_ripple_rad', '_round_rad', '_set_color', '_set_ellipse', 
   '_set_hard_shadow_a', '_set_soft_shadow_a', '_set_start_tab', '_set_text', '_shadow_origin', '_shadow_origin_x',
    '_shadow_origin_y', '_shadow_pos', '_soft_shadow_a', '_soft_shadow_texture', '_text', '_text_color_str',
     '_trigger_texture', '_trigger_texture_update', '_update_elevation', '_update_shadow', '_update_shadow_pos',
      '_update_specific_text_color', '_update_text_size', '_walk', '_walk_reverse', 'a', 'adaptive_height', 
      'adaptive_size', 'adaptive_width', 'add_widget', 'allow_no_selection', 'always_release', 'anchors', 'angle',
       'anim_complete', 'apply_class_lang_rules', 'apply_property', 'b', 'background', 'background_hue',
        'background_origin', 'background_palette', 'base_direction', 'bind', 'bold', 'can_capitalize', 'cancel_event', 
        'canvas', 'center', 'center_x', 'center_y', 'check_font_styles', 'children', 'clear_widgets', 'cls',
         'collide_point', 'collide_widget', 'color', 'create_property', 'dec_disabled', 'device_ios', 'disabled',
          'disabled_color', 'disabled_outline_color', 'dispatch', 'dispatch_children', 'dispatch_generic',
           'draw_shadow', 'elevation', 'ellipsis_options', 'events', 'export_as_image', 'export_to_png',
            'fade_out', 'fbind', 'finish_ripple', 'font', 'font_blended', 'font_context', 'font_family', 
            'font_features', 'font_hinting', 'font_kerning', 'font_name', 'font_size', 'font_style',
             'force_shadow_pos', 'funbind', 'g', 'get_center_x', 'get_center_y', 'get_disabled', 
             'get_parent_window', 'get_property_observers', 'get_right', 'get_root_window', 'get_top',
              'get_widgets', 'get_window_matrix', 'getter', 'group', 'halign', 'hard_shadow_cl',
               'hard_shadow_offset', 'hard_shadow_pos', 'hard_shadow_size', 'hard_shadow_texture',
                'height', 'ids', 'inc_disabled', 'is_event_type', 'is_shortened', 'italic', 'last_touch', 
                'lay_canvas_instructions', 'line_color', 'line_height', 'markup', 'max_lines', 'md_bg_color', 
                'min_space', 'min_state_time', 'mipmap', 'on__shadow_pos', 'on_adaptive_height', 'on_adaptive_size', 
                'on_adaptive_width', 'on_disabled', 'on_elevation', 'on_group', 'on_kv_post', 'on_opacity', 
                'on_opposite_colors', 'on_press', 'on_ref_press', 'on_release', 'on_shadow_group', 'on_shadow_pos', 
                'on_text_color', 'on_texture', 'on_theme_text_color', 'on_touch_down', 'on_touch_move', 'on_touch_up',
                 'opacity', 'opposite_colors', 'outline_color', 'outline_width', 'padding', 'padding_x',
                  'padding_y', 'parent', 'parent_background', 'pos', 'pos_hint', 'prev_shadow_group',
                   'properties', 'property', 'proxy_ref', 'r', 'radius', 'refs', 'register_event_type', 
                   'remove_widget', 'right', 'ripple_alpha', 'ripple_color', 'ripple_duration_in_fast',
                    'ripple_duration_in_slow', 'ripple_duration_out', 'ripple_func_in', 'ripple_func_out',
                     'ripple_rad_default', 'ripple_scale', 'set_center_x', 'set_center_y', 'set_disabled',
                      'set_right', 'set_top', 'setter', 'shadow_group', 'shadow_pos', 'shadow_preset', 'shorten',
                       'shorten_from', 'size', 'size_hint', 'size_hint_max', 'size_hint_max_x', 'size_hint_max_y',
                        'size_hint_min', 'size_hint_min_x', 'size_hint_min_y', 'size_hint_x', 'size_hint_y',
                         'soft_shadow_cl', 'soft_shadow_offset', 'soft_shadow_pos', 'soft_shadow_size',
                          'specific_secondary_text_color', 'specific_text_color', 'split_str', 'start_ripple', 
                          'state', 'strikethrough', 'strip', 'tab', 'tab_bar', 'text', 'text_color',
                           'text_color_active', 'text_color_normal', 'text_language', 'text_size',
                            'texture', 'texture_size', 'texture_update', 'theme_cls', 'theme_text_color', 
                            'to_local', 'to_parent', 'to_widget', 'to_window', 'top', 'trigger_action',
                             'uid', 'unbind', 'unbind_uid', 'underline', 'unicode_errors', 'unregister_event_types',
                              'update_background_origin', 'update_font_style', 'update_group_property', 'valign', 'walk',
                               'walk_reverse', 'widget_style', 'width', 'x', 'y']
(Pdb) 